import java.io.*;
import java.util.*;

/*

Array Index & Element Equality
Given a sorted array arr of distinct integers, write a function indexEqualsValueSearch that returns the lowest index i for 
which arr[i] == i. Return -1 if there is no such index. Analyze the time and space complexities of your solution and explain 
its correctness.

input: arr = [-8,0,2,5]
output: 2 # since arr[2] == 2

input: arr = [-1,0,3,6]
output: -1 # since no index in arr satisfies arr[i] == i.

Constraints:

[time limit] 5000ms

[input] array.integer arr

1 â‰¤ arr.length â‰¤ 100
[output] integer

Working out Examples:
 0,1,2,3
[0,2,4,5]
st = 0, end = 3
4/2 = 2
mid = (0+3)/2 = 1
base --> if(st>= end){
  return -1;
}
if(arr[1] > mid){
  leftArr --> st,mid-1
  
}else if(arr[1] < mid){
  rightArr --> 
}else{
  return mid
}

*/

class ArrayIndexNElementEquality {
  
  static int indexEqualsValueSearch(int[] arr) {
    
    return binSearch(arr, 0, arr.length-1);
    
  }
  static int binSearch(int[] arr, int st, int end){
    if(st>= end){
      if(st == end){
        if(arr[st] == st){
          return st;
        }
      }
      return -1;
    }else{
      int mid = (st + end )/2;
      if(arr[mid] > mid){
        return binSearch(arr, st, mid-1);
      }else if(arr[mid] < mid){
        return binSearch(arr, mid+1, end);
      }else{
        return mid;
      }
    }
  }
  
  public static void main(String[] args) {
    int result = ArrayIndexNElementEquality.indexEqualsValueSearch(new int[]{-8,0,2,5});
    System.out.println(result);
  }

}
