/*
Root of Number -> nth root of x
Many times, we need to re-implement basic functions without using any standard library functions already implemented. 
For example, when designing a chip that requires very little memory space.

In this question we’ll implement a function root that calculates the n’th root of a number. 
The function takes a nonnegative number x and a positive integer n, and returns the positive n’th root of x within an error 
of 0.001 (i.e. suppose the real root is y, then the error is: |y-root(x,n)| and must satisfy |y-root(x,n)| < 0.001).

Don’t be intimidated by the question. While there are many algorithms to calculate roots that require prior knowledge 
in numerical analysis (some of them are mentioned here), there is also an elementary method which doesn’t require more 
than guessing-and-checking. Try to think more in terms of the latter.

Make sure your algorithm is efficient, and analyze its time and space complexities.

Examples:

input:  x = 7, n = 3
output: 1.913

input:  x = 9, n = 2
output: 3
Constraints:

[time limit] 5000ms

[input] float x

0 ≤ x
[input] integer n

0 < n
[output] float
*/

import java.io.*;
import java.util.*;
/*
input:  x = 7, n = 3
output: 1.913

range = 1,7
mid = 4
4x4x4 = 64 ~ 7

1, 4
1+4/2 = 2.5
2.5x2.5x2.5 = 15.625
15.625 ~7

1, 2.5
3.5/2= 1.75
1.75^3 = 5.359375
5.359375 ~7

1.75, 2.5
4.25/2 = 2.125
2.125^3 = 9.595

9.595~7
.
.
.
*/
class RootOfNumber {

  static double root(double x, int n) {
    if(x < 1){
      return 0;
    }
    if(x == 1){
      return 1;
    }
    double[] range = new double[]{1, x};
    
    return findRoot(x, n, range);

  }
  //range ==> [st, end]
  static double findRoot(double x, int n, double[] range){
    if((range[1] - range[0]) <= 0.001){
      double midVal = (range[0]+range[1])/2;
      return (double) Math.round((midVal)*1000)/1000;
    }
    double mid = (range[0] + range[1])/2;
    double prod = 1;
    for(int i = 0; i < n ; i++){
      prod *= mid;
    }
    if(prod < x){
      return findRoot(x, n, new double[]{mid, range[1]});
    }else{
      return findRoot(x, n, new double[]{range[0], mid});
    }
  }

  public static void main(String[] args) {

    double result = RootOfNumber.root(7,3);
    System.out.println(result);
  }

}
