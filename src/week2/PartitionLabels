/*
LeetCode 763. Partition Labels
123456789 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
ababcbaca d  e  f  e  g  d  e  h  i  j  h  k  l  i  j

a - s = 1;  e= 9;
b - s = 2;  e= 6;
c - s = 5;  e= 8;
d - s = 10; e= 14;
e - s = 11; e= 16;
f - s = 12; e= 12;
g - s = 14; e= 14;
h - s = 17; e= 20;
i - s = 18; e= 23;
j - s = 19; e= 24;
k - s = 21; e= 21;
l - s = 22; e= 22;


banana
1,5
b 0,0
a 1,5
n 2,4

*/

class Solution {
    public List<Integer> partitionLabels(String S) {
        HashMap<Character, Pos> charPosMap = new HashMap<>();
        for(int i = 0; i < S.length(); i++){
            Character c = S.charAt(i);
            if(charPosMap.containsKey(c)){
                Pos p = charPosMap.get(c);
                p.end = i;
            }else{
                Pos p = new Pos(i, i);
                charPosMap.put(c, p);
            }
        }
        List<CharPos> charPosLst = new ArrayList<>();
        for(Character c: charPosMap.keySet()){
            charPosLst.add(new CharPos(c,charPosMap.get(c)));
        }
        Collections.sort(charPosLst, new SortByPos());
        int maxS=0, maxE=0, minS = 0;
        List<Integer> op = new ArrayList<>();
        int lstSize = charPosLst.size();
        int addStrLen = 0;
        for(int i = 0; i < lstSize; i++){
            CharPos chP = charPosLst.get(i);
            System.out.println(chP.ch + " "+ chP.p.st + " "+chP.p.end);
            int currE = chP.p.end;
            int currS = chP.p.st;
            if(maxE < currS || i == lstSize-1){
                System.out.println("op add b4"+ chP.ch + " "+ chP.p.st + " "+ chP.p.end);

                if(currS < maxE){
                    if(maxE < currE){
                        maxE = currE;
                    }
                }
                op.add(maxE - minS + 1);
                addStrLen += maxE - minS + 1;
                minS = currS;
                maxS = currS;
                maxE = currE;
                
            }
            if(chP.p.st > maxS){
                maxS = chP.p.st;
            }
            if(chP.p.end > maxE){
                maxE = chP.p.end;
            }
        }
        if(addStrLen < S.length()){
            op.add(S.length() - addStrLen);
        }
        return op;
    }
    
    private class CharPos{
        Character ch;
        Pos p;
        public CharPos(Character ch, Pos p){
            this.ch = ch;
            this.p = p;
        }
    }
    
    private class Pos{
        int st, end;
        
        public Pos(int st, int end){
            this.st = st;
            this.end = end;
        }
    }
    
    private class SortByPos implements Comparator<CharPos>{
        
        public int compare(CharPos a, CharPos b){
            return a.p.st - b.p.st;
        }
    }
    
}
